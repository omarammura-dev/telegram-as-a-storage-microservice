image: python:3.12.0-alpine

stages:
  - build
  - build-docker
  - deploy


build:
  stage: build
  before_script:
    - apk add --no-cache --upgrade bash
    - apk add --no-cache git
    - apk add --no-cache openssh-client
    - apk add --no-cache python3 py3-pip
    - apk add --no-cache gcc musl-dev python3-dev
    - pip install -r requirements.txt
  script:
    - python -c "import telegram_as_storage_pb2; import telegram_as_storage_pb2_grpc"
build image:
  stage: build-docker
  image: docker
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build --platform linux/arm64 -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  only:
    - main

deploy:
  stage: deploy
  script:
    - echo "deployment started!"
    - "which ssh-agent || ( apk update && apk add openssh-client )"
    - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $USER@$IP_ADDRESS "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh $USER@$IP_ADDRESS "docker pull $CI_REGISTRY_IMAGE"
    - ssh $USER@$IP_ADDRESS "docker stop storage-ms || true && docker rm storage-ms || true"
    - ssh $USER@$IP_ADDRESS "docker network create my-network || true"
    - ssh $USER@$IP_ADDRESS "docker run -d --name storage-ms --network my-network -p 50051:50051 -e BOT_NAME=\"$BOT_NAME\" -e APP_ID=\"$APP_ID\" -e API_HASH=\"$API_HASH\" $CI_REGISTRY_IMAGE"
  only:
    - main
