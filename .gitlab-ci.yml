image: python:3.12.0-alpine

stages:
  - build
  - build-docker
  - deploy

cache:
  paths:
    - go/pkg/mod

test:
  stage: build
  before_script:
    - apk add --no-cache --upgrade bash
    - apk add --no-cache git
    - apk add --no-cache openssh-client
    - apk add --no-cache python3 py3-pip
    - pip install -r requirements.txt
  script:
    - python -m unittest discover tests

build:
  stage: build
  before_script:
    - apk add --no-cache --upgrade bash
    - apk add --no-cache git
    - apk add --no-cache openssh-client
    - apk add --no-cache python3 py3-pip
    - pip install -r requirements.txt
  script:
    - python server.py build

build image:
  stage: build-docker
  image: docker
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build --platform linux/arm64 -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE

  only:
    - master

deploy:
  stage: deploy
  script:
    - echo "deployment started!"
    - "which ssh-agent || ( apk update && apk add openssh-client )"
    - eval $(ssh-agent -s) && echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - ssh $USER@$IP_ADDRESS "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh $USER@$IP_ADDRESS "docker pull $CI_REGISTRY_IMAGE"
    - ssh $USER@$IP_ADDRESS "docker stop mux-backend || true && docker rm mux-backend || true"
    - ssh $USER@$IP_ADDRESS "docker network create my-network || true"
    - ssh $USER@$IP_ADDRESS "docker run -d --name mux-backend --network my-network -p 8080:8080 -e MONGO_URL=\"$MONGO_URL\" -e MONGO_DB_NAME=\"$MONGO_DB_NAME\" -e SENDGRID_API_KEY=\"$SENDGRID_API_KEY\" -e API_URL=\"$API_URL\" -e UI_URL=\"$UI_URL\" $CI_REGISTRY_IMAGE"
  artifacts:
    paths:
      - myutilityx.com
  only:
    - master
